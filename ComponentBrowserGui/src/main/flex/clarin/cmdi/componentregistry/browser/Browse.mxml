<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
		   xmlns:browser="clarin.cmdi.componentregistry.browser.*"
		   initialize="init()"
		   creationComplete="creationComplete()"
		   width="100%"
		   height="100%"
		   label="Browse..."
		   implements="clarin.cmdi.componentregistry.common.components.RegistryView">
	<mx:Metadata>
		[Event(name="startItemLoaded",type="flash.events.Event")]
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import clarin.cmdi.componentregistry.services.BrowserService;
			import clarin.cmdi.componentregistry.services.Config;
			import clarin.cmdi.componentregistry.services.ComponentInfoService;
			import clarin.cmdi.componentregistry.services.ProfileInfoService;
			import clarin.cmdi.componentregistry.services.ProfileListService;
			import mx.events.CollectionEvent;
			import mx.collections.ArrayCollection;
			import clarin.cmdi.componentregistry.common.components.RegistryViewStack;
			import clarin.cmdi.componentregistry.common.components.BrowseContextMenu;
			import clarin.cmdi.componentregistry.services.DeleteService;
			import clarin.cmdi.componentregistry.services.ComponentListService;
			import clarin.cmdi.componentregistry.common.ItemDescription;
			import mx.controls.Alert;
			import clarin.cmdi.componentregistry.browser.BrowserSelectionEvent;
			import clarin.cmdi.componentregistry.common.Profile;

			public static const START_ITEM_LOADED:String = "startItemLoaded";
			
			private var startupItemLoaded:Boolean = false;

			[Bindable]
			private var componentsSrv:ComponentListService = ComponentListService.getInstance(Config.instance.userSpace);
			[Bindable]
			private var profilesSrv:ProfileListService = ProfileListService.getInstance(Config.instance.userSpace);
			[Bindable]
			private var profileSrv:ProfileInfoService = new ProfileInfoService();
			[Bindable]
			private var componentSrv:ComponentInfoService = new ComponentInfoService();

			private var deleteSrv:DeleteService = DeleteService.instance;

			[Bindable]
			private var profilesMenu:BrowseContextMenu;
			[Bindable]
			private var componentsMenu:BrowseContextMenu;
			[Bindable]
			private var selectedProfileItem:ItemDescription;
			[Bindable]
			private var selectedComponentItem:ItemDescription;
			private var startupItemId:String = null;

			public function init():void {
				profilesMenu = new BrowseContextMenu();
				profilesMenu.viewStack = this.parent as RegistryViewStack;
				profilesMenu.deleteService = deleteSrv;
				componentsMenu = new BrowseContextMenu(true);
				componentsMenu.viewStack = this.parent as RegistryViewStack;
				componentsMenu.deleteService = deleteSrv;
				deleteSrv.addEventListener(DeleteService.ITEM_DELETED, handleItemDeleted);
				Config.instance.addEventListener(Config.USER_SPACE_TOGGLE_EVENT, toggleUserSpace);
			}

			private function toggleUserSpace(event:Event):void {
				var userSpace:Boolean = Config.instance.userSpace;
				componentsSrv = ComponentListService.getInstance(userSpace);
				profilesSrv = ProfileListService.getInstance(userSpace);
				refresh();
			}

			private function creationComplete():void {
				startupItemId = Config.instance.startupItem;
				if (startupItemId) { //only load this once on startup
					componentsSrv.addEventListener(BrowserService.ITEMS_LOADED, componentsLoaded);
					profilesSrv.addEventListener(BrowserService.ITEMS_LOADED, profilesLoaded);
				}
				refresh();
			}

			public function refresh():void {
				componentsSrv.load();
				profilesSrv.load();
			}

			private function profilesLoaded(event:Event):void {
				var item:ItemDescription = ProfileListService.findDescription(startupItemId);
				loadStartupItem(item);
				profilesSrv.removeEventListener(BrowserService.ITEMS_LOADED, profilesLoaded);
			}

			private function componentsLoaded(event:Event):void {
				var item:ItemDescription = ComponentListService.findDescription(startupItemId);
				loadStartupItem(item);
				componentsSrv.removeEventListener(BrowserService.ITEMS_LOADED, componentsLoaded);
			}
			
			private function loadStartupItem(item:ItemDescription):void {
				if (item) {
					setSelectedDescription(item);
					startupItemId = null;
					dispatchEvent(new Event(START_ITEM_LOADED));
				} else if (startupItemLoaded) {
				    dispatchEvent(new Event(START_ITEM_LOADED));
				}
				startupItemLoaded = true;
			}

			private function loadProfileInfoPage(event:BrowserSelectionEvent):void {
				profileSrv.load(event.itemDescription);
			}

			private function loadComponentInfoPage(event:BrowserSelectionEvent):void {
				componentSrv.load(event.itemDescription);
			}

			public function setSelectedDescription(desc:ItemDescription):void {
				if (desc.isProfile) {
					tabnav.selectedIndex = 0;
					this.selectedProfileItem = desc;
					profileSrv.load(desc);
				} else {
					tabnav.selectedIndex = 1;
					this.selectedComponentItem = desc;
					componentSrv.load(desc);
				}
			}

			public function getSelectedStartItem():ItemDescription {
				if (this.selectedProfileItem) {
					return selectedProfileItem;
				} else {
					return selectedComponentItem;
				}
			}

			private function handleItemDeleted(event:Event):void {
				refresh();
			}

			public function getType():String {
				return Config.VIEW_BROWSE;
			}
		]]>
	</mx:Script>


	<browser:BrowserColumns id="browserColumns"/>


	<mx:VBox borderStyle="none"
			 horizontalAlign="center"
			 height="100%"
			 width="100%">

		<mx:TabNavigator id="tabnav"
						 width="100%"
						 height="100%"
						 color="0x323232"
						 y="59"
						 borderStyle="outset">
			<mx:VDividedBox label="Profiles"
							width="100%">
				<browser:BrowserOverviewList id="profilesOverview"
											 browserColumns="{browserColumns.getProfileColumns()}"
											 browserDataProvider="{profilesSrv.itemDescriptions}"
											 browserItemSelected="{loadProfileInfoPage(event)}"
											 itemToScrollTo="{selectedProfileItem}"
											 width="100%"
											 height="70%"
											 browseMenu="{profilesMenu}"/>
				<browser:ProfileInfoPage id="profileInfoPage"
										 profile="{profileSrv.profile}"
										 width="100%"
										 height="50%"
										 contextMenu="{profilesMenu.cm}"/>
			</mx:VDividedBox>

			<mx:VDividedBox label="Components"
							width="100%">
				<browser:BrowserOverviewList id="componentsOverview"
											 browserColumns="{browserColumns.getComponentColumns()}"
											 browserDataProvider="{componentsSrv.itemDescriptions}"
											 browserItemSelected="{loadComponentInfoPage(event)}"
											 itemToScrollTo="{selectedComponentItem}"
											 width="100%"
											 height="50%"
											 browseMenu="{componentsMenu}"/>
				<browser:ComponentInfoPage id="componentInfoPage"
										   component="{componentSrv.component}"
										   width="100%"
										   height="50%"
										   contextMenu="{componentsMenu.cm}"/>

			</mx:VDividedBox>
		</mx:TabNavigator>
	</mx:VBox>
</mx:Canvas>
