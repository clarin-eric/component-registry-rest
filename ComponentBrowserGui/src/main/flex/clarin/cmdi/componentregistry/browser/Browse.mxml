<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
		   xmlns:browser="clarin.cmdi.componentregistry.browser.*"
		   initialize="init()"
		   creationComplete="creationComplete()"
		   width="100%"
		   height="100%"
		   label="Component Browser"
		   implements="clarin.cmdi.componentregistry.common.components.RegistryView" xmlns:components="clarin.cmdi.componentregistry.common.components.*"
		   >
	<mx:Metadata>
		[Event(name="startItemLoaded",type="flash.events.Event")]
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import clarin.cmdi.componentregistry.common.ItemDescription;
			import clarin.cmdi.componentregistry.common.components.BrowseContextMenu;
			import clarin.cmdi.componentregistry.common.components.RegistryViewStack;
			import clarin.cmdi.componentregistry.services.BrowserService;
			import clarin.cmdi.componentregistry.services.ComponentInfoService;
			import clarin.cmdi.componentregistry.services.ComponentListService;
			import clarin.cmdi.componentregistry.services.Config;
			import clarin.cmdi.componentregistry.services.DeleteService;
			import clarin.cmdi.componentregistry.services.ProfileInfoService;
			import clarin.cmdi.componentregistry.services.ProfileListService;
			
			public static const START_ITEM_LOADED:String = "startItemLoaded";
			
			private var startupItemLoaded:Boolean = false;
			
			[Bindable]
			private var componentsSrv:ComponentListService = ComponentListService.getInstance(Config.instance.userSpace);
			[Bindable]
			private var profilesSrv:ProfileListService = ProfileListService.getInstance(Config.instance.userSpace);
			[Bindable]
			private var selectedProfileSrv:ProfileInfoService = new ProfileInfoService();
			[Bindable]
			private var selectedComponentSrv:ComponentInfoService = new ComponentInfoService();
			
			private var deleteSrv:DeleteService = DeleteService.instance;
			
			[Bindable]
			private var profilesMenu:BrowseContextMenu;
			[Bindable]
			private var componentsMenu:BrowseContextMenu;
			[Bindable]
			private var selectedProfileItem:ItemDescription;
			[Bindable]
			private var selectedComponentItem:ItemDescription;
			private var startupItemId:String = null;
			private var startupPanel:String = null;
			 
			private const padding:int = 5;
			private const bigPadding:int =10;
			
			public function init():void {
				profilesMenu = new BrowseContextMenu();
				profilesMenu.viewStack = this.parent as RegistryViewStack;
				profilesMenu.deleteService = deleteSrv;
				componentsMenu = new BrowseContextMenu(true);
				componentsMenu.viewStack = this.parent as RegistryViewStack;
				componentsMenu.deleteService = deleteSrv;
				deleteSrv.addEventListener(DeleteService.ITEM_DELETED, handleItemDeleted);
				
				Config.instance.addEventListener(Config.USER_SPACE_TOGGLE_EVENT, toggleUserSpace);
				Config.instance.addEventListener(Config.USER_SPACE_TOGGLE_EVENT, setUserSpace);
			
				setUserSpace();
				
			}
			
			private function toggleUserSpace(event:Event):void {
				var userSpace:Boolean = Config.instance.userSpace;
				componentsSrv = ComponentListService.getInstance(userSpace);
				profilesSrv = ProfileListService.getInstance(userSpace);
				refresh();
			}
			
			private function creationComplete():void { 
				refresh();
			}
			
			public function loadStartup():void {
				startupItemId = Config.instance.startupItem;
				startupPanel = Config.instance.browserPanel;
				if (startupItemId) { //only load this once on startup
					componentsSrv.addEventListener(BrowserService.ITEMS_LOADED, componentsLoaded);
					profilesSrv.addEventListener(BrowserService.ITEMS_LOADED, profilesLoaded);
				}
				refresh();
			}
			
			public function refresh():void {
				componentsSrv.load();
				profilesSrv.load();
				
				selectedComponentSrv = new ComponentInfoService();
				selectedProfileSrv = new ProfileInfoService();
			}
			
			private function profilesLoaded(event:Event):void {
				var item:ItemDescription = ProfileListService.findDescription(startupItemId);
				loadStartupItem(item);
				profileInfoPage.infoPanel.setPanel(Config.instance.browserPanel);				
				profilesSrv.removeEventListener(BrowserService.ITEMS_LOADED, profilesLoaded);
			}
			
			private function componentsLoaded(event:Event):void {
				var item:ItemDescription = ComponentListService.findDescription(startupItemId);
				if(item != null){
					loadStartupItem(item);
					componentInfoPage.infoPanel.setPanel(Config.instance.browserPanel);				
					componentsSrv.removeEventListener(BrowserService.ITEMS_LOADED, componentsLoaded);
				}
			}
			
			private function loadStartupItem(item:ItemDescription):void {
				if (item) {
					setSelectedDescription(item);
					startupItemId = null;
					dispatchEvent(new Event(START_ITEM_LOADED));
				} else if (startupItemLoaded) {
					dispatchEvent(new Event(START_ITEM_LOADED));
				}
				startupItemLoaded = true;
			}
			
			private function loadProfileInfoPage(event:BrowserSelectionEvent):void {
				selectedProfileSrv.load(event.itemDescription);
			}
			
			private function loadComponentInfoPage(event:BrowserSelectionEvent):void {
				selectedComponentSrv.load(event.itemDescription);
			}
			
			public function setSelectedDescription(desc:ItemDescription):void {
				if (desc.isProfile) {
					tabnav.selectedIndex = 0;
					this.selectedProfileItem = desc;
					selectedProfileSrv.load(desc);
				} else {
					tabnav.selectedIndex = 1;
					this.selectedComponentItem = desc;
					selectedComponentSrv.load(desc);
				}
			}
			
			public function getSelectedStartItem():ItemDescription {
				if (this.selectedProfileItem) {
					return selectedProfileItem;
				} else {
					return selectedComponentItem;
				}
			}
			
			private function handleItemDeleted(event:Event):void {
				refresh();
			}
			
			public function getType():String {
				return Config.VIEW_BROWSE;
			}
			
			private function createNewProfile(event:Event):void {
				RegistryViewStack(this.parent).getEditor().xmlEditor.clearEditorProfile();
				RegistryViewStack(this.parent).switchToEditor(null);
			}
			
			private function createNewComponent(event:Event):void {
				RegistryViewStack(this.parent).getEditor().xmlEditor.clearEditorComponent();
				RegistryViewStack(this.parent).switchToEditor(null);
			}
			
			private function setUserSpace(event:Event = null):void {
				if (Config.instance.userSpace) {
					userSpaceCB.selectedIndex = 1;
				} else {
					userSpaceCB.selectedIndex = 0;
				}
			}
		]]>
	</mx:Script>
	
	
	
	<browser:BrowserColumns id="browserColumns"/>
	
	<mx:Panel width="100%" 
			  height="100%"
			  headerHeight="0"
			  borderThicknessTop="0"
			  borderThicknessRight="0"
			  borderThicknessBottom="0"
			  borderThicknessLeft="0"
			  layout="absolute"
			  horizontalAlign="center"
			  >
		
		
		
		<mx:Box paddingTop="{padding}" paddingLeft="{padding}"
				horizontalCenter="-110"
				>
			<components:SpaceSwitch id="userSpaceCB" width="110" />
		</mx:Box>
		
		<mx:VBox left="0"
				 paddingTop="{bigPadding}"
				 borderStyle="none"
				 height="100%"
				 width="100%">
			
			<mx:TabNavigator id="tabnav"
							 width="100%"
							 height="100%"
							 color="0x323232"
							 y="59"
							 borderStyle="outset"
							 creationPolicy="all"
							 >
				<mx:VDividedBox label="Profiles"
								width="100%">
					
					<browser:BrowserOverviewList id="profilesOverview"
												 viewStack="{this.parent as RegistryViewStack}"
												 browserColumns="{browserColumns.getProfileColumns()}"
												 browserDataProvider="{profilesSrv.itemDescriptions}"
												 browserItemSelected="{loadProfileInfoPage(event)}"
												 itemToScrollTo="{selectedProfileItem}"
												 width="100%"
												 height="70%"
												 browseMenu="{profilesMenu}"
												 typeOfDescription = "profiles"
												 createNew="createNewProfile(event)"
												 />
					<browser:ProfileInfoPage id="profileInfoPage"
											 profile="{selectedProfileSrv.profile}"
											 width="100%"
											 height="50%"
											 contextMenu="{profilesMenu.cm}"/>
				</mx:VDividedBox>
				
				<mx:VDividedBox label="Components"
								width="100%">
				
				
					<browser:BrowserOverviewList id="componentsOverview"
												 viewStack="{this.parent as RegistryViewStack}"
												 browserColumns="{browserColumns.getComponentColumns()}"
												 browserDataProvider="{componentsSrv.itemDescriptions}"
												 browserItemSelected="{loadComponentInfoPage(event)}"
												 itemToScrollTo="{selectedComponentItem}"
												 width="100%"
												 height="70%"
												 browseMenu="{componentsMenu}"
												 typeOfDescription= "components"
												 createNew="createNewComponent(event)"
												 />
					<browser:ComponentInfoPage id="componentInfoPage"
											   component="{selectedComponentSrv.component}"
											   width="100%"
											   height="50%"
											   contextMenu="{componentsMenu.cm}"/>
					
				</mx:VDividedBox>
			</mx:TabNavigator>
		</mx:VBox>
	</mx:Panel>
</mx:Canvas>
