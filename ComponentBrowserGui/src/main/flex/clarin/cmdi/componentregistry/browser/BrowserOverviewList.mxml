<?xml version="1.0" encoding="utf-8"?>

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
		 xmlns:comp="clarin.cmdi.componentregistry.common.components.*"
		 xmlns:common="clarin.cmdi.componentregistry.common.*"
		 xmlns:rictus="com.rictus.controls.*"
		 initialize="init();"
		 creationComplete="scrollToSelected()">

	<mx:Metadata>
		[Event(name="browserItemSelected",type="clarin.cmdi.componentregistry.browser.BrowserSelectionEvent")]
		[Event(name="createNew", type="clarin.cmdi.componentregistry.browser.CreateNewComponentEvent")]
	</mx:Metadata>

	<mx:Array id="browserColumns"/>


	<mx:Script>
		<![CDATA[
			import clarin.cmdi.componentregistry.browser.BrowserSelectionEvent;
			import clarin.cmdi.componentregistry.common.Credentials;
			import clarin.cmdi.componentregistry.common.ItemDescription;
			import clarin.cmdi.componentregistry.common.Login;
			import clarin.cmdi.componentregistry.common.StyleConstants;
			import clarin.cmdi.componentregistry.common.components.BrowseContextMenu;
			import clarin.cmdi.componentregistry.common.components.RegistryViewStack;
			import clarin.cmdi.componentregistry.services.Config;
			
			import com.adobe.utils.ArrayUtil;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.events.CollectionEvent;
			
			private static const USERSPACE_LABEL:String = "Work space";
			private static const PUBLICSPACE_LABEL:String = "Public space";
		

			private var defaultColor:Object;
			private var currentSelectedItem:ItemDescription;
			[Bindable]
			private var menu:BrowseContextMenu;

			private var _itemToScrollTo:ItemDescription;
			[Bindable]
			public var spaces:ArrayCollection = new ArrayCollection([{label: PUBLICSPACE_LABEL, data: 1}, {label: USERSPACE_LABEL, data: 2}]);
			[Bindable]
			public var viewStack:RegistryViewStack;
			
			public function set browserDataProvider(dataProvider:ArrayCollection):void {
				if (dataProvider) {
					var data:ArrayCollection = new ArrayCollection(dataProvider.toArray().slice());
					this.dataGrid.dataProvider = data
					dataGrid.doFiltering();
					scrollToSelected();
				}
			}

			private function dispatchBrowserSelectionEvent():void {
				if (this.dataGrid.selectedItem != null) {
					var item:ItemDescription = dataGrid.selectedItem as ItemDescription
					if (currentSelectedItem == null || currentSelectedItem.id != item.id) { //Only update when the item selected is different.
						currentSelectedItem = item;
						var event:BrowserSelectionEvent = new BrowserSelectionEvent(item);
						dispatchEvent(event);
					}
				}
			}

			public function set itemToScrollTo(itemToScrollTo:ItemDescription):void {
				_itemToScrollTo = itemToScrollTo;
				scrollToSelected();
			}

			private function scrollToSelected():void {
				if (_itemToScrollTo && dataGrid.dataProvider) {
					for (var i:int; i < dataGrid.dataProvider.length; i++) {
						var item:ItemDescription = dataGrid.dataProvider.getItemAt(i) as ItemDescription;
						if (item.id == _itemToScrollTo.id) {
							dataGrid.selectedItem = item;
							dispatchBrowserSelectionEvent();
							dataGrid.setFocus();
							dataGrid.scrollToIndex(i);
							break;
						}
					}
				}
			}

			public function set browseMenu(browseMenu:BrowseContextMenu):void {
				this.menu = browseMenu;
				menu.dataGrid = dataGrid;
			}

			private function handleKeyUp(event:KeyboardEvent):void {
				if (event.keyCode == Keyboard.DELETE) {
					menu.deleteSelectedItems();
				}
			}

			private function init():void {
				Config.instance.addEventListener(Config.USER_SPACE_TOGGLE_EVENT, setUserSpace);
				setUserSpace();
			}

			private function setUserSpace(event:Event = null):void {
				if (Config.instance.userSpace) {
					userSpaceCB.selectedIndex = 1;
				} else {
					userSpaceCB.selectedIndex = 0;
				}
			}

			private function userSpaceCloseHandler(event:Event):void {
				if (Credentials.instance.isLoggedIn()) {
					Config.instance.userSpace = ComboBox(event.target).selectedItem.data == 2;
				} else if (userSpaceCB.selectedIndex != 0) {
					userSpaceCB.selectedIndex = 0;
					new Login().show(this, Config.VIEW_BROWSE, Config.SPACE_USER, null);
				}

			}
			
			private function editItem():void {
				var item:ItemDescription = dataGrid.selectedItem as ItemDescription;
				viewStack.switchToEditor(item);
			}
			
			private function dispatchCreateNewEvent():void{
				dispatchEvent(new CreateNewComponentEvent());
			}
		]]>
	</mx:Script>

	<mx:HBox paddingLeft="5" 
			 paddingRight="5"
			 width="100%">
	
		<mx:HBox horizontalAlign="left"
				 verticalAlign="middle"
				 width="50%">
			
			<mx:ComboBox id="userSpaceCB"
						 dataProvider="{spaces}"
						 width="110"
						 close="userSpaceCloseHandler(event);"/>
			
			<mx:Spacer width="10" />
			
			<!-- public space -->
			<mx:Button label="Edit as new" 
					   includeInLayout="{!Config.instance.userSpace}" 
					   visible="{!Config.instance.userSpace}"
					   enabled="{(dataGrid.selectedItem != null) &amp;&amp; Credentials.instance.isLoggedIn()}" 
					   click="editItem()" />
			<!-- private space -->
			<mx:Button label="Create new" includeInLayout="{Config.instance.userSpace}" 
					   visible="{Config.instance.userSpace}"
					   enabled="{Credentials.instance.isLoggedIn()}"
					   click="dispatchCreateNewEvent()"
					   />
			<mx:Button label="Edit" includeInLayout="{Config.instance.userSpace}" 
					   visible="{Config.instance.userSpace}"
					   enabled="{dataGrid.selectedItem != null &amp;&amp; Credentials.instance.isLoggedIn()}" 
					   click="editItem()" />
		</mx:HBox>
		
		<mx:HBox horizontalAlign="right"
				 verticalAlign="middle"
				 width="50%">
	
			<rictus:SearchBox id="searchBox"
							  label="filter..."/>
			<mx:Label text="Showing {dataGrid.dataProvider.length} of {dataGrid.unfilteredLength}"/>
		</mx:HBox>
	</mx:HBox>

	<comp:FilteringDataGrid id="dataGrid"
							x="0"
							y="112"
							width="100%"
							height="100%"
							click="dispatchBrowserSelectionEvent()"
							columns="{browserColumns}"
							contextMenu="{menu.cm}"
							allowMultipleSelection="true"
							searchInput="{searchBox}"
							keyUp="handleKeyUp(event)"
							useRollOver="false"
							showDataTips="true">
	</comp:FilteringDataGrid>
</mx:VBox>
