<?xml version="1.0" encoding="utf-8"?>

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
		 xmlns:comp="clarin.cmdi.componentregistry.common.components.*"
		 xmlns:common="clarin.cmdi.componentregistry.common.*"
		 xmlns:rictus="com.rictus.controls.*"
		 creationComplete="init()">

	<mx:Metadata>
		[Event(name="browserItemSelected",type="clarin.cmdi.componentregistry.browser.BrowserSelectionEvent")]
		[Event(name="createNew", type="clarin.cmdi.componentregistry.browser.CreateNewComponentEvent")]
	</mx:Metadata>

	<mx:Array id="browserColumns"/>
	
	<mx:Script>
		<![CDATA[
			import clarin.cmdi.componentregistry.common.Group;
			import clarin.cmdi.componentregistry.common.ItemDescription;
			import clarin.cmdi.componentregistry.common.components.BrowseContextMenu;
			import clarin.cmdi.componentregistry.common.components.RegistryViewStack;
			import clarin.cmdi.componentregistry.common.components.RssDescriptionsContextMenu;
			import clarin.cmdi.componentregistry.services.Config;
			import clarin.cmdi.componentregistry.services.ListUserGroupsMembershipService;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.rpc.events.ResultEvent;
			
			private var defaultColor:Object;
			private var currentSelectedItem:ItemDescription;
			
			[Bindable]
			private var menu:BrowseContextMenu;
			
			private var _itemToScrollTo:ItemDescription;
			
			public var typeOfDescription:String;
			
			[Bindable]
			public var viewStack:RegistryViewStack;
			
			[Bindable]
			public var buttonsEnabled:Boolean = true;
			
			[Bindable]
			public var spaceSwitchEnabled:Boolean = false;
			
			[Bindable]
			private var groups:ArrayCollection = new ArrayCollection();
			
			private static var currentSelectedGroup:String="";
			private var previousSelectedIndex:int=0;
			
			public function set browserDataProvider(dataProvider:ArrayCollection):void {
				if (dataProvider) {
					var data:ArrayCollection = new ArrayCollection(dataProvider.toArray().slice());
					this.dataGrid.dataProvider = data
					dataGrid.doFiltering();
					scrollToSelected();
				}
			}

			private function dispatchBrowserSelectionEvent():void {
				if (this.dataGrid.selectedItem != null) {
					var item:ItemDescription = dataGrid.selectedItem as ItemDescription
					currentSelectedItem = item;
					var event:BrowserSelectionEvent = new BrowserSelectionEvent(item);
					dispatchEvent(event);
				}
			}

			public function set itemToScrollTo(itemToScrollTo:ItemDescription):void {
				_itemToScrollTo = itemToScrollTo;
				scrollToSelected();
			}
			
			private function init():void{
				Config.instance.addEventListener(Config.USER_SPACE_TOGGLE_EVENT, onSpaceChanged);

				groups.addItem("Move to group...");
				Config.instance.getListUserGroupsMembershipService().addEventListener(ListUserGroupsMembershipService.GROUPS_LOADED, onGroupsLoaded);
				Config.instance.addEventListener(Config.USER_SPACE_TOGGLE_EVENT, updateGroupVisibility);
				Config.instance.getListUserGroupsMembershipService().loadGroupsForUser();
				addEventListener(GroupSelectionEvent.GROUP_SELECTED, onGroupSelected);
				
				scrollToSelected();
			}
			
			private function onSpaceChanged(event:Event):void{
				createNewButton.visible = (!Config.instance.selectedGroup);
				createNewButton.includeInLayout = (!Config.instance.selectedGroup);
				importButton.visible = (!Config.instance.selectedGroup);
				importButton.includeInLayout = (!Config.instance.selectedGroup);
			}

			private function scrollToSelected():void {
				if (_itemToScrollTo && dataGrid.dataProvider) {
					for (var i:int; i < dataGrid.dataProvider.length; i++) {
						var item:ItemDescription = dataGrid.dataProvider.getItemAt(i) as ItemDescription;
						if (item.id == _itemToScrollTo.id) {
							dataGrid.selectedItem = item;
							dispatchBrowserSelectionEvent();
							dataGrid.setFocus();
							dataGrid.scrollToIndex(i);
							break;
						}
					}
				}
			}

			public function set browseMenu(browseMenu:BrowseContextMenu):void {
				this.menu = browseMenu;
				menu.dataGrid = dataGrid;
			}
			
			


			private function handleKeyUp(event:KeyboardEvent):void {
				if (event.keyCode == Keyboard.DELETE) {
					menu.deleteSelectedItems();
				}
			}
			
			private function editItem():void {
				var item:ItemDescription = dataGrid.selectedItem as ItemDescription;
				viewStack.switchToEditor(item);
			}
			
			private function importItem():void{
				viewStack.switchToImport();
			}
			
			private function dispatchCreateNewEvent():void{
				dispatchEvent(new CreateNewComponentEvent());
			}
			
			
			private function goToFeed():void{
				var request:URLRequest = new URLRequest(Config.getRssUriDescriptions(typeOfDescription));
				navigateToURL(request, "_blank");
			}
			
			
			
			private function onGroupSelected(event:GroupSelectionEvent):void {
				//Some handler already moved the group for us
				if (event.groupWasMoved)
					return;
				if (!event.getGroupId()){
					// we don't want items to be moved from groups into void, thus object this selection event
					event.stopPropagation();
					event.stopImmediatePropagation();
					event.preventDefault();
				} else{
					var groupId:String = event.getGroupId();
					var itemId:String = currentSelectedItem.id;
					Alert.show("Items, once moved to a group, can not be moved back to your workspace. Do you want to move this item?", "Title", mx.controls.Alert.YES | mx.controls.Alert.NO, this, function (nestedCloseEvent:CloseEvent):void {
						if (nestedCloseEvent.detail == Alert.YES) {
							Config.instance.getListGroupsOfItemService().transferOwnership(itemId, groupId, itemTransferToGroupComplete);
						}
					});
				}
				event.groupWasMoved = true;
			}
			
			private function onMoveToGroupButtonClicked(event:Event):void {
				currentSelectedGroup=groupBox.selectedItem.groupId;
				var groupEvent:GroupSelectionEvent = new GroupSelectionEvent(groupBox.selectedItem.groupId, groupBox.selectedItem.label);
				dispatchEvent(groupEvent);
				// did someone object this selection?
				if (groupEvent.isDefaultPrevented()){
					//e.preventDefault, stopPropagation and stopImmediatePropagation don't undo the selection so we have to do it manually here
					groupBox.selectedIndex = previousSelectedIndex;
				} else{
					previousSelectedIndex = groupBox.selectedIndex;
				}
			}
			
			public function onGroupsLoaded(event:Event):void{
				groups.removeAll();
				groups.addItem({label:"Move to group...", space:null, groupId:null});
				
				for each (var group:Group in Config.instance.getListUserGroupsMembershipService().groups) {
					groups.addItem({label:group.name, space:Config.SPACE_USER, groupId:group.id});					
				}
				updateGroupVisibility(event);
			}
			
			
			private function updateGroupVisibility(event:Event):void{
				var showGroups:Boolean = Config.instance.getListUserGroupsMembershipService().groups.length>0 && Config.instance.space != Config.SPACE_PUBLIC;
				groupPanel.visible = showGroups;
				groupBox.selectedIndex = 0;
			}
			
			protected function itemTransferToGroupComplete(resultEvent:ResultEvent):void {
				RegistryViewStack.showView(Config.VIEW_BROWSE, currentSelectedItem);
			}
		]]>
	</mx:Script>
	
	<mx:HBox paddingLeft="5" 
			 paddingRight="5"
			 width="100%">
		
		<mx:Box paddingTop="5" paddingLeft="5" 
				visible="{spaceSwitchEnabled}" 
				includeInLayout="{spaceSwitchEnabled}">
			<comp:SpaceSwitch id="userSpaceCB" />
		</mx:Box>
		
		<mx:HBox horizontalAlign="left"
				 verticalAlign="middle"
				 width="70%"
				 visible="{buttonsEnabled}">
			
			
			<mx:Button 
				       id="createNewButton"
					   label="Create new" 
					   toolTip="Create a new item in the private workspace"
					   click="dispatchCreateNewEvent()"
					   />
			<mx:Button label="Edit"
					   toolTip="Edit the selected item in the editor"
					   visible="{Config.instance.space == Config.SPACE_USER}" 
					   includeInLayout="{Config.instance.space == Config.SPACE_USER}"
					   enabled="{Config.instance.space == Config.SPACE_USER &amp;&amp; dataGrid.selectedItem != null}" 
					   click="editItem()" />
			<mx:Button label="Edit as new"   
					   toolTip="Edit the selected item as a new item in the private workspace"
					   visible="{Config.instance.space != Config.SPACE_USER}" 
					   includeInLayout="{Config.instance.space != Config.SPACE_USER}"
					   enabled="{Config.instance.space != Config.SPACE_USER &amp;&amp; dataGrid.selectedItem != null}" 
					   click="editItem()" />
			<mx:Button id="importButton"
					   label="Import"
					   toolTip="Import an item from a local file"
					   click="importItem()" />
			
			<mx:HBox id="groupPanel" 
					 visible="true"
					 enabled="{Config.instance.space == Config.SPACE_USER &amp;&amp; dataGrid.selectedItem != null}" 
					 >
				<mx:ComboBox id="groupBox"
							 dataProvider="{groups}"
							 />
				<mx:Button id="moveToGroupBtn"
						   label="Move to group"
						   click="onMoveToGroupButtonClicked(event)"/>
			</mx:HBox>
			
		</mx:HBox>
		
		<mx:HBox horizontalAlign="right"
				 verticalAlign="middle"
				 width="30%">
	
			<rictus:SearchBox id="searchBox"
							  label="filter..."/>
			<mx:Label text="Showing {dataGrid.dataProvider.length} of {dataGrid.unfilteredLength}"/>
	   </mx:HBox>
		<comp:RssLinkButton 
			enabled ="{Config.instance.space != Config.SPACE_USER}"
			visible="{Config.instance.space != Config.SPACE_USER}"
			contextMenu = "{(new RssDescriptionsContextMenu(typeOfDescription)).cm}"
			click="goToFeed()"
			/>	
	</mx:HBox>

	<comp:FilteringDataGrid id="dataGrid"
							x="0"
							y="112"
							width="100%"
							height="100%"
							change="dispatchBrowserSelectionEvent()"
							columns="{browserColumns}"
							contextMenu="{menu.cm}"
							allowMultipleSelection="true"
							searchInput="{searchBox}"
							keyUp="handleKeyUp(event)"
							useRollOver="false"
							showDataTips="true">
	</comp:FilteringDataGrid>
</mx:VBox>
