<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
		 xmlns:common="clarin.cmdi.componentregistry.common.*"
		 xmlns:browser="clarin.cmdi.componentregistry.browser.*"
		 
		 xmlns:comp="clarin.cmdi.componentregistry.common.components.*"
		 xmlns:rictus="com.rictus.controls.*"
		 creationComplete="scrollToCommentSelected()">
	<mx:Metadata>
		[Event(name="browserCommentSelected",type="clarin.cmdi.componentregistry.browser.BrowserSelectionEvent")]
	</mx:Metadata>
	
	<mx:Array id="browserColumns"/>
	
	<mx:Script>
		<![CDATA[
			import clarin.cmdi.componentregistry.editor.model.CMDModelFactory;
			
			import clarin.cmdi.componentregistry.common.Credentials;
			import clarin.cmdi.componentregistry.common.Login;
			import mx.collections.ArrayList;
			import com.adobe.utils.ArrayUtil;
			import clarin.cmdi.componentregistry.common.StyleConstants;
			import clarin.cmdi.componentregistry.services.Config;
			import clarin.cmdi.componentregistry.common.components.BrowseContextMenu;
			import mx.collections.ArrayCollection;
			import mx.events.CollectionEvent;
			import clarin.cmdi.componentregistry.browser.BrowserSelectionEvent;
			import clarin.cmdi.componentregistry.common.CommentDescription;
			
			private var defaultColor:Object;
			private var currentSelectedComment:CommentDescription;
			[Bindable]
			private var menu:BrowseContextMenu;
			
			private var _itemToScrollToComment:CommentDescription;
			
			public function set browserDataProvider(dataProvider:ArrayCollection):void {
				if (dataProvider) {
					var data:ArrayCollection = new ArrayCollection(dataProvider.toArray().slice());
					this.dataGrid.dataProvider = data
					dataGrid.doFiltering();
					scrollToCommentSelected();
				}
			}
			
			
			private function dispatchBrowserSelectionEvent():void {
				if (this.dataGrid.selectedItem != null) {
					var item:CommentDescription = dataGrid.selectedItem as CommentDescription
					if (currentSelectedComment == null || currentSelectedComment.id != item.id) { //Only update when the item selected is different.
						currentSelectedComment = item;
						/* 						var event:BrowserSelectionEvent = new BrowserSelectionEvent(item);
						dispatchEvent(event); */
					}
				}
			}
			
			public function set itemToScrollToComment(itemToScrollTo:CommentDescription):void {
				_itemToScrollToComment = itemToScrollTo;
				scrollToCommentSelected();
			}
			
			private function scrollToCommentSelected():void {
				if (_itemToScrollToComment && dataGrid.dataProvider) {
					for (var i:int; i < dataGrid.dataProvider.length; i++) {
						var item:CommentDescription = dataGrid.dataProvider.getItemAt(i) as CommentDescription;
						if (item.id == _itemToScrollToComment.id) {
							dataGrid.selectedItem = item;
							dispatchBrowserSelectionEvent();
							dataGrid.setFocus();
							dataGrid.scrollToIndex(i);
							break;
						}
					}
				}
			}
			
			public function set browseMenu(browseMenu:BrowseContextMenu):void {
				this.menu = browseMenu;
				menu.dataGrid = dataGrid;
			}
			
			private function handleKeyUp(event:KeyboardEvent):void {
				if (event.keyCode == Keyboard.DELETE) {
					menu.deleteSelectedItems();
				}				
			}
		]]>
	</mx:Script>
	
	<mx:HBox horizontalAlign="center"
			 verticalAlign="middle"
			 width="100%">
		
		
		<rictus:SearchBox id="searchBox"
						  label="filter..."/>
		<mx:Label text="Showing {dataGrid.dataProvider.length} of {dataGrid.unfilteredLength}"/>
	</mx:HBox>
	
	<comp:FilteringDataGrid id="dataGrid"
							x="0"
							y="112"
							width="100%"
							height="100%"
							click="dispatchBrowserSelectionEvent()"
							columns="{browserColumns}"
							contextMenu="{menu.cm}"
							allowMultipleSelection="true"
							searchInput="{searchBox}"
							keyUp="handleKeyUp(event)"
							useRollOver="false"
							showDataTips="true">
	</comp:FilteringDataGrid>
	
	<mx:XML id="cmdComment"/>
	<common:CommentDescription id="commentDescription"/>
	<browser:CMDComponentXMLBrowser id="commentBrowse"
									cmdSpec = "{CMDModelFactory.createCommentModel(cmdComment, commentDescription)}"
									width="100%"
									height="100%"/>
</mx:VBox>