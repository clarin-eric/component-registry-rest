<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml">
	<mx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.core.IDataRenderer;
			import mx.controls.Button;
			import mx.events.ListEvent;
			import mx.events.DataGridEventReason;
			import clarin.cmdi.componentregistry.common.ComponentMD;
			import mx.collections.XMLListCollection;
			import mx.controls.TextInput;
			import mx.events.DataGridEvent;
			import mx.collections.ArrayCollection;
			import mx.managers.PopUpManager;

			private static const ADD_ROW:String = "Click to add a row";

			[Bindable]
			public var valueSchemeEnumeration:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var conceptLinkEdit:Boolean = false;
			private var currentEditPosition:Object;

			public function initEnumeration(valueSchemeData:XMLListCollection):void {
				if (valueSchemeData) {
					for each (var item:XML in valueSchemeData) {
						valueSchemeEnumeration.addItem({item: item.text(), appInfo: item.@AppInfo, conceptLink: item.@ConceptLink});
					}
				}
				valueSchemeEnumeration.addItem({item: ADD_ROW, appInfo: "", conceptLink: ""});
			}

			private function editEnd(e:DataGridEvent):void {
				if (e.rowIndex == valueSchemeEnumeration.length - 1 && e.columnIndex == 0 && e.reason != DataGridEventReason.CANCELLED) {
					var row:Object = valueSchemeEnumeration.getItemAt(valueSchemeEnumeration.length - 1);
					var input:Object = TextInput(e.currentTarget.itemEditorInstance);
					if (row.item == ADD_ROW && input.text != ADD_ROW) {
						valueSchemeEnumeration.addItem({item: ADD_ROW, appInfo: "", conceptLink: ""});
						//scroll down
						dataGrid.validateNow();
						dataGrid.selectedIndex = valueSchemeEnumeration.length - 1;
						dataGrid.scrollToIndex(valueSchemeEnumeration.length);
					}
				}
			}

			private function checkEdit(event:DataGridEvent):void {
				// Do not allow editing of "Add row" row except for "Click to Add" column
				if (event.rowIndex == valueSchemeEnumeration.length - 1 && event.columnIndex != 0)
					event.preventDefault();
			}

			public function setConceptLink(input:TextInput):void {
				var currentEditRow:Object = valueSchemeEnumeration.getItemAt(currentEditPosition.rowIndex);
				currentEditRow.conceptLink = input.text;
				dataGrid.invalidateList();
				conceptLinkEdit = false;
			}

			private function handleItemEditBegin(e:DataGridEvent):void {
				if (e.rowIndex < valueSchemeEnumeration.length - 1 && e.columnIndex == 2) {
					conceptLinkEdit = true;
					currentEditPosition = dataGrid.editedItemPosition;
				} else {
					conceptLinkEdit = false;
				}
			}

//TODO PD show tooltip for isocat somewhere
			private function handleKeyUp(event:KeyboardEvent):void {
				if (event.keyCode == Keyboard.DELETE) {
					deleteRow(event);
				}
			}

			private function deleteRow(event:*):void {
				var indices:Array = dataGrid.selectedIndices;
				for each (var index:int in indices) {
					if (index != valueSchemeEnumeration.length - 1) { //Don't delete last row
						valueSchemeEnumeration.removeItemAt(index);
					}
				}
				dataGrid.validateNow();
			}
			
			private function insertRowAbove(event:ContextMenuEvent):void {
			    var index:int = Math.max(0, dataGrid.selectedIndex);
			    valueSchemeEnumeration.addItemAt({item: ADD_ROW, appInfo: "", conceptLink: ""}, index);
			}

			private function createContextMenu():ContextMenu {
				var cm:ContextMenu = new ContextMenu();
				cm.hideBuiltInItems();
				var items:Array = new Array();
				var cmi:ContextMenuItem = new ContextMenuItem("Insert row above selected row...");
				cmi.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, insertRowAbove);
				items.push(cmi);
				cmi = new ContextMenuItem("Delete row...", true);
				cmi.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, deleteRow);
				items.push(cmi);
				cm.customItems = items;
				return cm;
			}
		]]>
	</mx:Script>

	<mx:DataGrid id="dataGrid"
				 editable="true"
				 doubleClickEnabled="true"
				 sortableColumns="false"
				 dataProvider="{valueSchemeEnumeration}"
				 itemEditEnd="editEnd(event)"
				 itemEditBeginning="checkEdit(event)"
				 itemEditBegin="handleItemEditBegin(event)"
				 allowMultipleSelection="true"
				 keyUp="handleKeyUp(event)"
				 contextMenu="{createContextMenu()}"
				 useRollOver="false">
		<mx:columns>
			<mx:DataGridColumn dataField="item"/>
			<mx:DataGridColumn dataField="appInfo"/>
			<mx:DataGridColumn dataField="conceptLink"/>
		</mx:columns>
	</mx:DataGrid>
</mx:VBox>
