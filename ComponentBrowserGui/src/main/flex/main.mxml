<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
				xmlns:common="clarin.cmdi.componentregistry.common.components.*"
				layout="absolute"
				preinitialize="init();"
				applicationComplete="appComplete();"
				backgroundColor="#DDE3EF">
	<mx:Style source="/assets/css/main.css"/>
	<mx:Script>
		<![CDATA[
			import clarin.cmdi.componentregistry.common.AboutPopup;
			import clarin.cmdi.componentregistry.common.Credentials;
			import clarin.cmdi.componentregistry.common.components.HelpLabelButton;
			import clarin.cmdi.componentregistry.services.Config;
			import clarin.cmdi.componentregistry.services.PingSessionService;
			
			import com.flexspy.FlexSpy;
			
			import mx.controls.Button;
			import mx.managers.PopUpManager;
			
			import org.hasseg.externalMouseWheel.ExternalMouseWheelSupport;
			
			
			private var sessionPinger:PingSessionService;
			[Bindable]
			private var aboutMenu:ContextMenu;
			
			private const bigPadding:int = 10;
			private const padding:int = 5;
			
			private function init():void{
				this.contextMenu = createMenu();
				initializeInstances();
			}
			
			private function initializeInstances():void {
				Credentials.create(Application.application.parameters);
				Config.create(Application.application.parameters);				
			}
			
			private function createMenu():ContextMenu{
				var menu:ContextMenu = new ContextMenu();
				var item:ContextMenuItem = new ContextMenuItem("About Clarin Component Registry");
				item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, showAbout);
				menu.customItems = [item];
				menu.hideBuiltInItems();
				return menu;
			}
			
			private function showAbout(event:ContextMenuEvent):void{
				var aboutBox:AboutPopup = new AboutPopup();
				aboutBox.x = appPanel.width/2 - aboutBox.width/2;
				aboutBox.y = appPanel.height/2 - aboutBox.height/2;
				PopUpManager.addPopUp(aboutBox, event.mouseTarget);
			}
			
			private function appComplete():void {
				ExternalMouseWheelSupport.getInstance(stage);
				sessionPinger = PingSessionService.INSTANCE
				sessionPinger.startPinging();
				if (Credentials.instance.isLoggedIn() && (Config.instance.space == Config.SPACE_USER)) {
					Config.instance.userSpace = true;
				}
				viewStack.loadStartup();
				
				if(Config.instance.debug){
					var flexSpyButton:Button = new Button();
					flexSpyButton.label="FlexSpy";
					flexSpyButton.addEventListener(MouseEvent.CLICK,showFlexSpy);
					flexSpyButton.setStyle("right", appPanel.width/2);
					flexSpyButton.setStyle("top", padding);
					addChild(flexSpyButton);
				}
			}
			
			private function showFlexSpy(event:Event):void{
				FlexSpy.show();
			}
			
		]]>
	</mx:Script>
	
	<mx:VBox id="appPanel"
			 top="{bigPadding}" 
			 left="{bigPadding}"
			 bottom="{bigPadding}" 
			 right="{bigPadding}"
			 >
		
		<mx:HBox width="100%">
			<mx:Label text="Clarin Component Registry" fontWeight="bold"/>
			<mx:Spacer width="100%"/>
		    <common:HelpLabelButton id="helpLink" paddingRight="{padding}" />
		</mx:HBox>
		
		<mx:VBox verticalGap="0" height="100%" width="100%" >
			
			<mx:HBox width="100%" id="topBar" styleName="topBar" verticalAlign="middle">
				<mx:Label width="20%" styleName="sectionTitle" paddingLeft="{padding}" text="{viewStack.selectedChild.label}" />
				<mx:HBox width="80%" horizontalAlign="right" paddingRight="{padding}">					
					<mx:Label text="User: {Credentials.instance.userName}"/>
					<common:LoginLabelButton id="login" includeInLayout="{!Credentials.instance.isLoggedIn()}" visible="{!Credentials.instance.isLoggedIn()}" />
					<common:UserSettingsLabelButton id="userSettings" includeInLayout="{Credentials.instance.isLoggedIn()}" visible="{Credentials.instance.isLoggedIn()}"/>
				</mx:HBox>
			</mx:HBox>
			
			<common:RegistryViewStack id="viewStack"
									  borderStyle="none"
									  height="100%"
									  width="100%"
									  />
		</mx:VBox>	
	</mx:VBox>
</mx:Application>
