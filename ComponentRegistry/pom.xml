<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>clarin.cmdi</groupId>
  <artifactId>ComponentRegistry</artifactId>
  <packaging>${packaging}</packaging>
  <version>1.2</version>
  <name>ComponentRegistry</name>
  <description>
        ComponentRegistry is part of the clarin metadata infrastructure (cmdi). 
        The goal of the ComponentRegistry will be to register and make searchable Metadata Components and Profiles. 
  </description>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.6</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>net.sf.saxon</groupId>
      <artifactId>saxon</artifactId>
      <version>8.7</version>
    </dependency>
    <dependency>
      <groupId>javax.xml.bind</groupId>
      <artifactId>jaxb-api</artifactId>
      <version>2.1</version>
    </dependency>
    <dependency>
      <groupId>javax.xml</groupId>
      <artifactId>jaxb-impl</artifactId>
      <version>2.1</version>
    </dependency>
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>servlet-api</artifactId>
      <version>2.5</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <version>1.4</version>
    </dependency>
    <dependency>
      <groupId>commons-lang</groupId>
      <artifactId>commons-lang</artifactId>
      <version>2.5</version>
    </dependency>
    <dependency>
      <groupId>commons-fileupload</groupId>
      <artifactId>commons-fileupload</artifactId>
      <version>1.2.1</version>
    </dependency>
    <dependency>
      <groupId>commons-collections</groupId>
      <artifactId>commons-collections</artifactId>
      <version>3.2.1</version>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-log4j12</artifactId>
      <version>1.4.2</version>
    </dependency>
    <dependency>
      <groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
      <version>1.2.14</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring</artifactId>
      <version>2.5.6</version>
    </dependency>
    <dependency>
      <groupId>com.sun.jersey</groupId>
      <artifactId>jersey-server</artifactId>
      <version>1.1.5</version>
    </dependency>
    <dependency> <!-- Needed for "automatic" json support -->
      <groupId>com.sun.jersey</groupId>
      <artifactId>jersey-json</artifactId>
      <version>1.1.5</version>
      <exclusions>
        <!--
          Jersey has dependencies with different group ids therefore maven cannot resolve the conflict and gives me both
          jars (two of stax and two of jaxb-impl). Excluding them manually to overcome the problem
        -->
        <exclusion>
          <groupId>stax</groupId>
          <artifactId>stax-api</artifactId>
        </exclusion>
        <exclusion>
          <groupId>com.sun.xml.bind</groupId>
          <artifactId>jaxb-impl</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency> <!-- Needed for form upload support -->
      <groupId>com.sun.jersey.contribs</groupId>
      <artifactId>jersey-multipart</artifactId>
      <version>1.1.5</version>
    </dependency>
    <dependency> <!-- Client used for RegistryFiller command line tool-->
      <groupId>com.sun.jersey</groupId>
      <artifactId>jersey-client</artifactId>
      <version>1.1.5</version>
    </dependency>
    <dependency>
      <groupId>net.sf.saxon</groupId>
      <artifactId>saxon-dom</artifactId>
      <version>8.7</version>
    </dependency>

    <dependency>
      <groupId>com.sun.jersey</groupId>
      <artifactId>jersey-test-framework</artifactId>
      <version>1.1.5</version>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <groupId>org.glassfish.embedded</groupId>
          <artifactId>glassfish-embedded-all</artifactId>
        </exclusion>
        <exclusion>
          <groupId>com.sun.grizzly</groupId>
          <artifactId>grizzly-servlet-webserver</artifactId>
        </exclusion>
        <exclusion>
          <groupId>com.sun.xml.bind</groupId>
          <artifactId>jaxb-impl</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>com.sun.xml.stream</groupId>
      <artifactId>sjsxp</artifactId>
      <version>1.0.1</version>
    </dependency>
    <dependency> <!-- de.mpg.mpgaai jars are located in libs and need to be installed manually, they are not available from a remote maven repo -->
      <groupId>de.mpg.mpgaai</groupId>
      <artifactId>mpgaai-jaas</artifactId>
      <version>1.3.2</version>
    </dependency>
    <dependency>
      <groupId>de.mpg.mpgaai</groupId>
      <artifactId>mpgaai-shhaa</artifactId>
      <version>1.0.2</version>
    </dependency>
  </dependencies>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <packaging>war</packaging>
    <!-- Properties to configure ComponentRegistry override on commandline with -D or change here -->
    <serviceRootUrl>http://localhost:8080/${pom.artifactId}</serviceRootUrl>
    <isocatSearchUrl>http://www.isocat.org/rest/user/guest/search</isocatSearchUrl>
    <registryRoot>/tmp/ComponentRegistry</registryRoot> <!-- /Users/patdui/Workspace/Clarin/MyRegistry -->
    <ComponentBrowserGuiVersion>1.2</ComponentBrowserGuiVersion>
  </properties>

  <build>
    <filters>
      <filter>properties/flexindex.properties</filter>
    </filters>
    <resources>
      <resource>
        <filtering>false</filtering>
        <directory>src/generated/jaxb</directory>
      </resource>
      <resource>
        <filtering>true</filtering>
        <directory>src/main/resources</directory>
      </resource>
    </resources>
    <testResources>
      <testResource>
        <directory>src/test/resources</directory>
      </testResource>
    </testResources>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>1.5</source>
          <target>1.5</target>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <configuration>
          <warName>${pom.artifactId}</warName>
          <webResources>
            <resource>
              <directory>src/main/webresources</directory>
              <filtering>true</filtering>
              <includes>
                <include>index.jsp</include>
                <include>WEB-INF/applicationContext.xml</include>
              </includes>
            </resource>
          </webResources>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.jvnet.jaxb2.maven2</groupId>
        <artifactId>maven-jaxb2-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>generate</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <!-- assuming claring metadata project is checked out in same folder as this project -->
          <schemaDirectory>../../metadata/toolkit/</schemaDirectory>
          <schemaIncludes>
            <include>general-component-schema.xsd</include>
          </schemaIncludes>
          <bindingDirectory>src/main/binding</bindingDirectory>
          <extension>true</extension>
          <generateDirectory>${basedir}/src/generated/jaxb</generateDirectory>
          <generatePackage>clarin.cmdi.componentregistry.components</generatePackage>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>copy</id>
            <phase>process-resources</phase>
            <goals>
              <goal>copy</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>clarin.cmdi</groupId>
                  <artifactId>ComponentBrowserGui</artifactId>
                  <version>${ComponentBrowserGuiVersion}</version>
                  <type>swf</type>
                  <overWrite>true</overWrite>
                  <outputDirectory>${project.build.directory}/${project.artifactId}-${project.version}</outputDirectory>
                  <destFileName>${pom.artifactId}.swf</destFileName>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!--
        Assembly helper to create the RegistryFiller tool a command line tool which can help fill in a registry with
        existing components/profiles. Build the tool with: mvn -Dpackaging=jar -Dmaven.test.skip=true assembly:assembly
        This creates a in "target" a ComponentRegistry-1.0-SNAPSHOT-RegistryFiller directory with a bin and share
        directory. You can start the tool from the bin dir.
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <configuration>
          <attach>false</attach>
          <ignoreDirFormatExtensions>true</ignoreDirFormatExtensions>
          <descriptors>
            <descriptor>src/main/assembly/registryFiller.xml</descriptor>
          </descriptors>
        </configuration>
      </plugin>
    </plugins>
  </build>



  <repositories>
    <repository>
      <id>maven2-repository.dev.java.net</id>
      <name>Java.net Maven 2 Repository</name>
      <url>http://download.java.net/maven/2</url>
    </repository>
    <repository>
      <id>maven-repository.dev.java.net</id>
      <name>Java.net Maven 1 Repository (legacy)</name>
      <url>http://download.java.net/maven/1</url>
      <layout>legacy</layout>
    </repository>
  </repositories>
  <pluginRepositories>
    <pluginRepository>
      <id>maven2-repository.dev.java.net</id>
      <name>Java.net Maven 2 Repository</name>
      <url>http://download.java.net/maven/2</url>
    </pluginRepository>
    <pluginRepository>
      <id>maven-repository.dev.java.net</id>
      <name>Java.net Maven 1 Repository (legacy)</name>
      <url>http://download.java.net/maven/1</url>
      <layout>legacy</layout>
    </pluginRepository>
  </pluginRepositories>

</project>
