<?xml version="1.0" encoding="UTF-8"?>
<!--
    Component Registry context.xml
    Twan Goosen <twan@clarin.eu>, 2017/12/07

    This file contains configuration options for the ComponentRegistry 
    package which includes both the REST service and the Flex UI.
    
    For information about the component registry, see 
    <http://www.clarin.eu/cmdi> and 
    <http://trac.clarin.eu/wiki/ComponentRegistry>.
    
    == DATABASE CONNECTION ==
    
    By default, the application assumes a named (JNDI) datasource 
    jdbc/ComponentRegistry that provides access to the ComponentRegistry
    database.
    
    For more information, or configuring a custom datasource Spring bean,
    see WEB-INF/spring-config/datasource-jdbc.xml
    
    A database creation script can be found at 
    <https://github.com/clarin-eric/component-registry-rest/raw/master/ComponentRegistry/src/main/sql/create.sql>
    
    You can also use the Docker Compose configuration that can be found in the 
    /docker/compose/postgres directory of the sources. Running `docker-compose up -d`
    in that directory will start a postgres server and make it available at a host port,
    and initialise an empty Component Registry database if needed.
    
    == SPRING CONFIGURATION ==
    
    This application uses the Spring framework <http://www.springsource.org/>,
    version 2.5. Part of its configuration is handled through Spring beans. 
    These are defined in WEB-INF/applicationContext.xml and the files in 
    WEB-INF/spring-config.
        
    == SHIBBOLETH ==
    
    This application uses Shibboleth authentication. Make sure that the URIs
    for login/logout are set correctly in WEB-INF/shhaa.xml. 
-->
<Context path="/ds/ComponentRegistry">
  <!-- 
	Passed to the Flex via compRegConfig.jsp so that it can locate the 
	ComponentRegistry REST service. Just supply the PUBLIC application root 
        in the path; the '/rest/registry' part will be added by the application.
        
        "serviceUrlPath" is MANDATORY in all cases and should contain the path 
        of the application relative to the server root, starting with a forward
        slash but no trailing slash, e.g. "/ComponentRegistry", or "" for root
        deployment.
        
        In addition, either "serviceUrlPath" OR the two parameters
        "serviceUrlProtocolHeader" and "serviceUrlHostHeader" need to be 
        defined.
    -->
  <Parameter name="eu.clarin.cmdi.componentregistry.serviceUrlBase" value="${serviceUrlBase}"/>
  <Parameter name="eu.clarin.cmdi.componentregistry.serviceUrlPath" value="${serviceUrlPath}"/>
  <!--
     Uncomment two lines below iff you would like to use the protocol and host
     provided in the request headers.
    -->
  <!--
    <Parameter name="eu.clarin.cmdi.componentregistry.serviceUrlProtocolHeader" value="X-FORWARDED-PROTO"/>
    <Parameter name="eu.clarin.cmdi.componentregistry.serviceUrlHostHeader" value="X-FORWARDED-HOST"/>
    -->
  <!--
        Location that gets redirected to from /documentation.jsp, which in turn is linked to
        from the Flex application through the 'Help' link button.
    -->
  <Parameter name="eu.clarin.cmdi.componentregistry.documentationUrl" value="${documentationUrl}"/>
  <!--
        Space-separated list of users (getRemoteUser()) that should have access to the admin area of the ComponentRegistry
    -->
  <Parameter name="eu.clarin.cmdi.componentregistry.adminUsers" value="${adminUsers}"/>
  <!--
        Base location of the CMDI toolkit
    -->
  <Parameter name="eu.clarin.cmdi.componentregistry.toolkitLocation" value="${toolkitLocation}"/>
  <!--
        Location of the CMDI general component schema that validates component specifications
    -->
  <Parameter name="eu.clarin.cmdi.componentregistry.generalComponentSchemaUrl" value="${generalComponentSchemaUrl}"/>
  <!--
        Location of the stylesheet that transforms component specifications into XML schema documents
    -->
  <Parameter name="eu.clarin.cmdi.componentregistry.component2SchemaXslUrl" value="${component2SchemaXslUrl}"/>
  <Parameter name="eu.clarin.cmdi.componentregistry.component2SchemaXslUrl.cmdi_1_1" value="${component2SchemaXslUrlCmdi11}"/>
  <!--
        Base location of the Concept Registry service
    -->
  <Parameter name="eu.clarin.cmdi.componentregistry.ccrRestUrl" value="${ccrRestUrl}"/>
  <!-- 
        Base location of the CLAVAS vocabulary service 
    -->
  <!-- Test instance (OpenSKOS 2) -->
  <Parameter name="eu.clarin.cmdi.componentregistry.clavasRestUrl" value="${clavasRestUrl}"/>
  <!-- Production instance -->
  <!--<Parameter name="eu.clarin.cmdi.componentregistry.clavasRestUrl" value="https://openskos.meertens.knaw.nl/clavas/api/"/>-->  
  <!-- Skosmos CCR test instance -->
  <!--<Parameter name="eu.clarin.cmdi.componentregistry.clavasRestUrl" value="https://clarin-skosmos.sd.di.huc.knaw.nl"/>-->
  
  <!-- Skosmos cache refresh interval in seconds -->
  <Parameter name="eu.clarin.cmdi.componentregistry.skosmos.cacheRefreshRateSeconds" value="${skosmosCacheRefreshRate}"/>
  
  <!-- CCR filters -->
  <!--    * Included Skosmos vocabularies for concepts -->
  <Parameter name="eu.clarin.cmdi.componentregistry.skosmos.ccr.includedVocabularies" value="${skosmosCcrIncludedVocabs}" />
  <!--    * Included Skosmos schemes for concepts -->
  <Parameter name="eu.clarin.cmdi.componentregistry.skosmos.ccr.includedSchemes" value="${skosmosCcrIncludedSchemes}" />

  <!-- CLAVAS filters -->
  <!--    * Included Skosmos vocabularies for concepts -->
  <Parameter name="eu.clarin.cmdi.componentregistry.skosmos.vocabs.includedVocabularies" value="${skosmosVocabsIncludedVocabularies}" />
  <!--    * Excluded Skosmos vocabularies for concepts -->
  <Parameter name="eu.clarin.cmdi.componentregistry.skosmos.vocabs.excludedVocabularies" value="${skosmosVocabsExcludedVocabularies}" />
  <!--    * Included Skosmos schemes for concepts -->
  <Parameter name="eu.clarin.cmdi.componentregistry.skosmos.vocabs.includedSchemes" value="${skosmosVocabsIncludedSchemes}" />
  <!--    * Excluded Skosmos schemes for concepts -->
  <Parameter name="eu.clarin.cmdi.componentregistry.skosmos.vocabs.excludedSchemes" value="${skosmosVocabsExcludedSchemes}" />
  
</Context>
