INSTALLING THE COMPONENT REGISTRY REST SERVICE AND FLEX UI

Important to know
-----------------
The Component Registry REST service depends on a PostgreSQL database to
store its data. It is packaged as a servlet and has been tested to work with
Tomcat. 

The package includes a Javascript (REACT) based client that runs client-side in
the user's browser. It is wrapped by an index.html page that loads it and passes
some configuration; it is located in the root of the application directory. 

The application is mainly configured through context parameters (see below).

Setting up the database
-----------------------
- Create a new PostgreSQL database and configure users and roles
- Run the create script 'create.sql' under the appropriate permissions

Configuring Tomcat
------------------
By default, the application assumes a named (JNDI) datasource 
jdbc/ComponentRegistry that provides access to the ComponentRegistry
database. Set it up for the database described above in the Tomcat 
configuration.
    
For more information, or configuring a custom datasource Spring bean,
see WEB-INF/spring-config/datasource-jdbc.xml

If you keep the context parameters in a per-application context fragment,
make sure it is up-to-date with the one in the META-INF directory of the
war package. If not, make sure all context parameters defined in this file
are present in your global context configuration.

Deploying the application
-------------------------
Deploy the ComponentRegistry.war file to the Tomcat instance.

Configuring the application
---------------------------
Some aspects require additional configuration depending on the context:

- Shibboleth authentication. ComponentRegistry uses the SHHAA filter, which
  is configured in WEB-INF/shhaa.xml. Make sure SSO and SLO URL's are correct.
  
- Admin users. The application expects a context parameter
  'componentRegistryAdminUsers' to be set as a white-space separated list of
  users that should be granted access to the administration interface. So,
  make sure the following is set in the relevant context fragment:

    <Parameter 
        name="eu.clarin.cmdi.componentregistry.adminUsers" 
		value="joe.admin@mpi.nl someone.else@clarin.eu"/>

- Documentation url: The application expects a context parameter 
  'eu.clarin.cmdi.componentregistry.documentationUrl' to be set. The application
  redirects to this page when the user browses to /documentation.jsp or clicks
  the 'help' link in the GUI.

- Location parameters: a number of context parameters define locations of
  schema and XSLT locations. Usually the defaults should be fine. The concerning
  parameters are:
  	* eu.clarin.cmdi.componentregistry.documentationUrl
  	* eu.clarin.cmdi.componentregistry.generalComponentSchemaUrl
  	* eu.clarin.cmdi.componentregistry.component2SchemaXslUrl
  	* eu.clarin.cmdi.componentregistry.componentSpecSchemaLocation
  	* eu.clarin.cmdi.componentregistry.ccrRestUrl
